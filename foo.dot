digraph G {
  block0 [ label="block0: int\ d\lint\ e\lint\ c\l\l" ];
  block1 [ label="block1: *start\ of\ method*\l" ];
  block2 [ label="block2: int\ baz\le\ =\ e\ +\ 1\lprintf\(\"Invoked\ baz\ %lld\ times!\\n\"\,\ e\)\lreturn\ e\l\l" ];
  block3 [ label="block3: NOT\ VOID\l*end\ of\ method*\l" ];
  block4 [ label="block4: *start\ of\ method*\l" ];
  block5 [ label="block5: int\ foo\lc\ =\ c\ +\ 1\lprintf\(\"Invoked\ foo\ %lld\ times!\\n\"\,\ c\)\lreturn\ c\l\l" ];
  block6 [ label="block6: NOT\ VOID\l*end\ of\ method*\l" ];
  block7 [ label="block7: *start\ of\ method*\l" ];
  block8 [ label="block8: int\ bar\ld\ =\ d\ +\ 1\lprintf\(\"Invoked\ bar\ %lld\ times!\\n\"\,\ d\)\lreturn\ d\l\l" ];
  block9 [ label="block9: NOT\ VOID\l*end\ of\ method*\l" ];
  block10 [ label="block10: *start\ of\ method*\l" ];
  block11 [ label="block11: void\ main\lint\ i\lprintf\(\"foo\,\ bar\,\ and\ baz\ should\ be\ invoked\ 6\,\ 5\,\ and\ 14\ times\ respectively\\n\"\)\li\ =\ 0\l\l" ];
  block12 [ label="block12: i\ \<\ foo\(\)\l" ];
  block13 [ label="block13: i\ ==\ 5\l" ];
  block15 [ label="block15: i\ =\ 0\l\l" ];
  block16 [ label="block16: i\ !=\ bar\(\)\l" ];
  block17 [ label="block17: i\ ==\ 4\l" ];
  block19 [ label="block19: i\ =\ 0\l\l" ];
  block20 [ label="block20: i\ \<\ 100\l" ];
  block21 [ label="block21: i\ =\ i\ +\ baz\(\)\l\l" ];
  block22 [ label="block22: *end\ of\ method*\l" ];
  block18 [ label="block18: i\ =\ i\ +\ 1\l\l" ];
  block14 [ label="block14: i\ =\ i\ +\ 1\l\l" ];
  block0 -> block1;
  block1 -> block2;
  block2 -> block3;
  block3 -> block4;
  block4 -> block5;
  block5 -> block6;
  block6 -> block7;
  block7 -> block8;
  block8 -> block9;
  block9 -> block10;
  block10 -> block11;
  block11 -> block12;
  block12 -> block13;
  block13 -> block15;
  block15 -> block16;
  block16 -> block17;
  block17 -> block19;
  block19 -> block20;
  block20 -> block21;
  block21 -> block20;
  block20 -> block22;
  block17 -> block18;
  block18 -> block16;
  block16 -> block19;
  block13 -> block14;
  block14 -> block12;
  block12 -> block15;
}
