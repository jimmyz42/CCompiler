doing loop invariant motion
Loop: [block2, block3]
Invariant Stmts: []
Invariant Stmts: [x = 5
]
Creating Preheader
NEW CFG ---------------------------
BasicBlock block0:
*start of method*
block0 points to:
    block1
BasicBlock block1:
void main
    int sum
    int j
    int y
    int x
    int i
    sum = 0
    x = 0
    y = 0
    j = 0
    x = 5

block1 points to:
    block2
BasicBlock block2:
    j < 10
block2 points to:
    block3
    block4
BasicBlock block3:
    sum = sum + j
    j = j + 1

block3 points to:
    block2
BasicBlock block4:
    sum != 45
block4 points to:
    block5
    block6
BasicBlock block5:
    printf("ERROR: for loop is bad (1)\n")

block5 points to:
    block6
BasicBlock block6:
    i = 11
    y = x + 1
    j = 10

block6 points to:
    block7
BasicBlock block7:
    j < 0
block7 points to:
    block8
    block9
BasicBlock block8:
    i = i + 1
    x = y + y + 7
    j = j + 1

block8 points to:
    block7
BasicBlock block9:
    i != 11
block9 points to:
    block10
    block11
BasicBlock block10:
    printf("ERROR: for loop is bad (2)\n")
    printf("%d\n", i)

block10 points to:
    block11
BasicBlock block11:
    1 > 2
block11 points to:
    block12
    block13
BasicBlock block12:
    printf("ERROR: true branch is bad (2)\n")

block12 points to:
    block13
BasicBlock block13:
    1 < 2
block13 points to:
    block17
    block16
BasicBlock block17:
    printf("control flow OK if no previous output\n")

block17 points to:
    block15
BasicBlock block15:
*end of method*
block15 points to:
BasicBlock block16:
    printf("ERROR: else branch is bad (2)\n")

block16 points to:
    block17
BasicBlock block17:
    printf("control flow OK if no previous output\n")

block17 points to:
    block15

Loop: [block7, block8]
Invariant Stmts: []
Invariant Stmts: [x = y + y + 7
]
Creating Preheader
NEW CFG ---------------------------
BasicBlock block0:
*start of method*
block0 points to:
    block1
BasicBlock block1:
void main
    int sum
    int j
    int y
    int x
    int i
    sum = 0
    x = 0
    y = 0
    j = 0
    x = 5

block1 points to:
    block2
BasicBlock block2:
    j < 10
block2 points to:
    block3
    block4
BasicBlock block3:
    sum = sum + j
    j = j + 1

block3 points to:
    block2
BasicBlock block4:
    sum != 45
block4 points to:
    block5
    block6
BasicBlock block5:
    printf("ERROR: for loop is bad (1)\n")

block5 points to:
    block6
BasicBlock block6:
    i = 11
    y = x + 1
    j = 10
    x = y + y + 7

block6 points to:
    block7
BasicBlock block7:
    j < 0
block7 points to:
    block8
    block9
BasicBlock block8:
    i = i + 1
    j = j + 1

block8 points to:
    block7
BasicBlock block9:
    i != 11
block9 points to:
    block10
    block11
BasicBlock block10:
    printf("ERROR: for loop is bad (2)\n")
    printf("%d\n", i)

block10 points to:
    block11
BasicBlock block11:
    1 > 2
block11 points to:
    block12
    block13
BasicBlock block12:
    printf("ERROR: true branch is bad (2)\n")

block12 points to:
    block13
BasicBlock block13:
    1 < 2
block13 points to:
    block17
    block16
BasicBlock block17:
    printf("control flow OK if no previous output\n")

block17 points to:
    block15
BasicBlock block15:
*end of method*
block15 points to:
BasicBlock block16:
    printf("ERROR: else branch is bad (2)\n")

block16 points to:
    block17
BasicBlock block17:
    printf("control flow OK if no previous output\n")

block17 points to:
    block15

